// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, create_at, updated_at, display_name, email_address, password, api_key)
VALUES ($1, $2, $3, $4, $5, $6,
    encode(sha256(random()::text::bytea), 'hex')
)
RETURNING id, create_at, updated_at, display_name, email_address, password, api_key
`

type CreateUserParams struct {
	ID           uuid.UUID
	CreateAt     time.Time
	UpdatedAt    time.Time
	DisplayName  string
	EmailAddress string
	Password     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreateAt,
		arg.UpdatedAt,
		arg.DisplayName,
		arg.EmailAddress,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdatedAt,
		&i.DisplayName,
		&i.EmailAddress,
		&i.Password,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, create_at, updated_at, display_name, email_address, password, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdatedAt,
		&i.DisplayName,
		&i.EmailAddress,
		&i.Password,
		&i.ApiKey,
	)
	return i, err
}

const logIn = `-- name: LogIn :one
SELECT id, create_at, updated_at, display_name, email_address, password, api_key FROM users u WHERE u.email_address = $1 and u.password = $2
`

type LogInParams struct {
	EmailAddress string
	Password     string
}

func (q *Queries) LogIn(ctx context.Context, arg LogInParams) (User, error) {
	row := q.db.QueryRowContext(ctx, logIn, arg.EmailAddress, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdatedAt,
		&i.DisplayName,
		&i.EmailAddress,
		&i.Password,
		&i.ApiKey,
	)
	return i, err
}
